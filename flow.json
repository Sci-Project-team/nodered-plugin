[
  {
    "id": "flow1",
    "label": "SMS Gateway Flow",
    "disabled": false,
    "type": "tab",
    "info": "",
    "env": []
  },
  {
    "id": "inject1",
    "type": "inject",
    "z": "flow1",
    "name": "Send Emergency Alert",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"phoneNumber\":\"+213676866606\",\"message\":\"EMERGENCY ALERT: System critical error detected. Immediate attention required!\"}",
    "payloadType": "json",
    "x": 160,
    "y": 80,
    "wires": [["sms1"]]
  },
  {
    "id": "inject2",
    "type": "inject",
    "z": "flow1",
    "name": "Daily Status Report",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "0 9 * * *",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"phoneNumber\":\"+213676866606\",\"message\":\"Daily Status: All systems operational. Server uptime: 99.9%\"}",
    "payloadType": "json",
    "x": 160,
    "y": 140,
    "wires": [["sms1"]]
  },
  {
    "id": "inject3",
    "type": "inject",
    "z": "flow1",
    "name": "Custom Message",
    "props": [
      {
        "p": "phoneNumber",
        "v": "+213676866606",
        "vt": "str"
      },
      {
        "p": "message",
        "v": "Hello! This is a custom message from Node-RED.",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 150,
    "y": 200,
    "wires": [["sms1"]]
  },
  {
    "id": "http1",
    "type": "http in",
    "z": "flow1",
    "name": "HTTP Trigger",
    "url": "/send-sms",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 140,
    "y": 260,
    "wires": [["function1"]]
  },
  {
    "id": "function1",
    "type": "function",
    "z": "flow1",
    "name": "Process HTTP Request",
    "func": "// Extract phone number and message from HTTP request\nconst phoneNumber = msg.payload.phoneNumber || msg.payload.phone_number;\nconst message = msg.payload.message;\n\n// Validate inputs\nif (!phoneNumber || !message) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Phone number and message are required\" };\n    return [null, msg]; // Send to error output\n}\n\n// Set up the SMS message\nmsg.phoneNumber = phoneNumber;\nmsg.message = message;\nmsg.operation = \"send\";\n\nreturn [msg, null]; // Send to success output",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 370,
    "y": 260,
    "wires": [["sms1"], ["http2"]]
  },
  {
    "id": "sms1",
    "type": "sms-gateway",
    "z": "flow1",
    "name": "SMS Gateway",
    "config": "config1",
    "operation": "send",
    "phoneNumber": "",
    "message": "",
    "limit": 50,
    "logLevel": "",
    "component": "",
    "x": 570,
    "y": 160,
    "wires": [["debug1", "function2"]]
  },
  {
    "id": "debug1",
    "type": "debug",
    "z": "flow1",
    "name": "SMS Response",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 790,
    "y": 120,
    "wires": []
  },
  {
    "id": "function2",
    "type": "function",
    "z": "flow1",
    "name": "HTTP Response",
    "func": "// Only process if this came from HTTP request\nif (msg.req && msg.res) {\n    msg.statusCode = 200;\n    msg.payload = {\n        success: true,\n        message: \"SMS sent successfully\",\n        data: msg.payload\n    };\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 790,
    "y": 200,
    "wires": [["http2"]]
  },
  {
    "id": "http2",
    "type": "http response",
    "z": "flow1",
    "name": "HTTP Response",
    "statusCode": "",
    "headers": {},
    "x": 790,
    "y": 260,
    "wires": []
  },
  {
    "id": "mqtt1",
    "type": "mqtt in",
    "z": "flow1",
    "name": "MQTT Trigger",
    "topic": "alerts/emergency",
    "qos": "2",
    "datatype": "auto",
    "broker": "broker1",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 140,
    "y": 320,
    "wires": [["function3"]]
  },
  {
    "id": "function3",
    "type": "function",
    "z": "flow1",
    "name": "Process MQTT Alert",
    "func": "// Process MQTT message and create SMS\nlet alertData;\ntry {\n    alertData = JSON.parse(msg.payload);\n} catch (e) {\n    alertData = { message: msg.payload };\n}\n\n// Create emergency SMS\nmsg.phoneNumber = \"+213676866606\"; // Your emergency contact\nmsg.message = `ðŸš¨ MQTT Alert: ${alertData.message || 'Unknown alert'}`;\nmsg.operation = \"send\";\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 320,
    "wires": [["sms1"]]
  },
  {
    "id": "config1",
    "type": "sms-gateway-config",
    "name": "My SMS Gateway",
    "baseUrl": "http://localhost:8000"
  },
  {
    "id": "broker1",
    "type": "mqtt-broker",
    "name": "Local MQTT",
    "broker": "localhost",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  }
]
